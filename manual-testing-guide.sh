#!/bin/bash

# Manual Step-by-Step ArgoCD App-of-Apps Testing Guide
# Run each step manually to validate the infrastructure

echo "ðŸš€ ArgoCD App-of-Apps Manual Testing Guide"
echo "==========================================="
echo ""

echo "âœ… Prerequisites Check:"
echo "----------------------"
echo "âœ… kubectl: $(kubectl version --client | head -1)"
echo "âœ… kind: $(kind version)"
echo "âœ… docker: $(docker version --format '{{.Client.Version}}')"
echo "âœ… helm: $(helm version --short)"
echo ""

echo "ðŸ“‹ Manual Testing Steps:"
echo "========================"
echo ""

echo "Step 1: Clean Environment"
echo "-------------------------"
echo "Run: make clean-clusters"
echo "Expected: All existing KIND clusters removed"
echo ""

echo "Step 2: Create KIND Clusters"
echo "----------------------------"
echo "Run: make setup-clusters"
echo "Expected: dev-cluster, qa-cluster, prod-cluster created"
echo "Verify: kind get clusters"
echo ""

echo "Step 3: Switch to Dev Cluster"
echo "-----------------------------"
echo "Run: kubectl config use-context kind-dev-cluster"
echo "Expected: Current context switched to dev cluster"
echo "Verify: kubectl config current-context"
echo ""

echo "Step 4: Install ArgoCD"
echo "----------------------"
echo "Run: make setup-argocd"
echo "Expected: ArgoCD installed in argocd namespace"
echo "Verify: kubectl get pods -n argocd"
echo "Wait: kubectl wait --for=condition=Ready pods --all -n argocd --timeout=300s"
echo ""

echo "Step 5: Bootstrap App-of-Apps"
echo "-----------------------------"
echo "Run: ./bootstrap.sh"
echo "Expected: Root application created and projects configured"
echo "Verify: kubectl get application root-app -n argocd"
echo ""

echo "Step 6: Wait for Applications"
echo "-----------------------------"
echo "Wait: 2-3 minutes for applications to sync"
echo "Check: kubectl get applications -n argocd"
echo "Expected: All applications showing Synced and Healthy"
echo ""

echo "Step 7: Verify Multi-Environment Apps"
echo "-------------------------------------"
echo "Check: kubectl get applications -n argocd | grep app1"
echo "Expected: app1-dev, app1-qa, app1-prod applications"
echo "Check: kubectl get applications -n argocd | grep app2"
echo "Expected: app2-dev, app2-qa, app2-prod applications"
echo ""

echo "Step 8: Verify Infrastructure Components"
echo "----------------------------------------"
echo "Check: kubectl get applications -n argocd | grep cert-manager"
echo "Check: kubectl get applications -n argocd | grep ingress-nginx"
echo "Expected: Infrastructure applications deployed"
echo ""

echo "Step 9: Verify Monitoring Components"
echo "------------------------------------"
echo "Check: kubectl get applications -n argocd | grep prometheus"
echo "Check: kubectl get applications -n argocd | grep grafana"
echo "Expected: Monitoring applications deployed"
echo ""

echo "Step 10: Check Namespaces"
echo "-------------------------"
echo "Check: kubectl get namespaces | grep app1"
echo "Check: kubectl get namespaces | grep app2"
echo "Check: kubectl get namespaces | grep cert-manager"
echo "Check: kubectl get namespaces | grep ingress-nginx"
echo "Check: kubectl get namespaces | grep monitoring"
echo "Expected: All application and infrastructure namespaces created"
echo ""

echo "Step 11: Access ArgoCD UI"
echo "------------------------"
echo "Get password: make get-argocd-password"
echo "Port forward: make port-forward-argocd (in separate terminal)"
echo "Access: http://localhost:8080"
echo "Login: admin / <password-from-step-above>"
echo "Expected: UI shows all applications in green (Synced/Healthy)"
echo ""

echo "Step 12: Test Application Access"
echo "-------------------------------"
echo "Port forward: make port-forward-app (in separate terminal)"
echo "Test: curl http://localhost:8081/health"
echo "Expected: Application responds with health status"
echo ""

echo "Step 13: Test Monitoring Access"
echo "-------------------------------"
echo "Port forward: make port-forward-grafana (in separate terminal)"
echo "Access: http://localhost:3000"
echo "Expected: Grafana UI accessible"
echo ""

echo "Step 14: Test GitOps Workflow"
echo "-----------------------------"
echo "Update: VERSION=v1.0.1 make update-image"
echo "Monitor: kubectl get applications -n argocd -w"
echo "Expected: Applications sync automatically after image update"
echo ""

echo "Step 15: Cleanup Test"
echo "--------------------"
echo "Run: ./cleanup.sh"
echo "Expected: All applications removed gracefully"
echo "Final: make clean-clusters"
echo "Expected: All KIND clusters removed"
echo ""

echo "ðŸŽ¯ Success Criteria:"
echo "===================="
echo "â€¢ All applications show 'Synced' and 'Healthy' status"
echo "â€¢ Multi-environment deployments work (dev/qa/prod)"
echo "â€¢ Infrastructure components deploy successfully"
echo "â€¢ Monitoring stack is accessible"
echo "â€¢ ArgoCD UI is accessible and functional"
echo "â€¢ GitOps workflow triggers automatic sync"
echo "â€¢ Cleanup removes all resources properly"
echo ""

echo "ðŸ“Š Key Validation Commands:"
echo "==========================="
echo "kubectl get applications -n argocd"
echo "kubectl get applicationsets -n argocd"
echo "kubectl get namespaces | grep -E '(app1|app2|cert-manager|ingress-nginx|monitoring)'"
echo "kubectl get pods -A | grep -E '(app1|app2|cert-manager|ingress-nginx|prometheus|grafana)'"
echo ""
